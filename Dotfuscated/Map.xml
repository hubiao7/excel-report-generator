<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.2.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2018-03-11T21:54:14</timestamp>
        <product version="5.32.1.6167" user="Alexey Trofimov" serial="235689-391">Dotfuscator Community Edition</product>
    </header>
    <mapping>
        <module>
            <name>ExcelReportGenerator.dll</name>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>&lt;Number&gt;j__TPar</name>
                    <newname>a</newname>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType0`1</name>
                <newname>a</newname>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Number</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Number&gt;i__Field</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>!0()</signature>
                        <name>Number</name>
                        <newname>a</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>&lt;Template&gt;j__TPar</name>
                    <newname>a</newname>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType1`1</name>
                <newname>b</newname>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Template</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Template&gt;i__Field</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>!0()</signature>
                        <name>Template</name>
                        <newname>a</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>&lt;Totals&gt;j__TPar</name>
                    <newname>a</newname>
                </genericparameter>
                <name>&lt;&gt;f__AnonymousType2`1</name>
                <newname>c</newname>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Totals</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Totals&gt;i__Field</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>!0()</signature>
                        <name>Totals</name>
                        <newname>a</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;</name>
                <newname>bk</newname>
                <methodlist>
                    <method>
                        <signature>unsigned int32(string)</signature>
                        <name>ComputeStringHash</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Attributes.ExcelColumnAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AdjustToContent</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction()</signature>
                        <name>get_AggregateFunction</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Caption</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayFormat</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoreDisplayFormat</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_NoAggregate</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Order</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Width</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AdjustToContent</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Enums.AggregateFunction)</signature>
                        <name>set_AggregateFunction</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Caption</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DisplayFormat</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoreDisplayFormat</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_NoAggregate</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Order</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Width</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;AdjustToContent&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction</signature>
                        <name>&lt;AggregateFunction&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Caption&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;DisplayFormat&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IgnoreDisplayFormat&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;NoAggregate&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Order&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Width&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AdjustToContent</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction()</signature>
                        <name>AggregateFunction</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Caption</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DisplayFormat</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IgnoreDisplayFormat</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>NoAggregate</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Order</name>
                    </property>
                    <property>
                        <signature>float64()</signature>
                        <name>Width</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Attributes.ExternalPropertyAttribute</name>
                <newname>bj</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Converter</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_Converter</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;Converter&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Attributes.LicenceKeyPartAttribute</name>
                <newname>bi</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_L</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_R</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_U</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_L</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_R</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_U</name>
                        <newname>f</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;L&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;R&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;U&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Attributes.NoExcelColumnAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Attributes.NullValueAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Constants</name>
                <newname>d</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>InvalidTemplateMessage</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TOut</name>
                    <newname>a</newname>
                </genericparameter>
                <name>ExcelReportGenerator.Converters.ExternalPropertiesConverters.IExternalPropertyConverter`1</name>
                <newname>be</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Converters.ExternalPropertiesConverters.PanelTypeConverter</name>
                <newname>bf</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Enums.PanelType(string)</signature>
                        <name>Convert</name>
                        <newname>as</newname>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ExcelReportGenerator.Converters.IConverter.Convert</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Converters.ExternalPropertiesConverters.RenderPriorityConverter</name>
                <newname>bg</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>Convert</name>
                        <newname>as</newname>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ExcelReportGenerator.Converters.IConverter.Convert</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Converters.ExternalPropertiesConverters.ShiftTypeConverter</name>
                <newname>bh</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Enums.ShiftType(string)</signature>
                        <name>Convert</name>
                        <newname>as</newname>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ExcelReportGenerator.Converters.IConverter.Convert</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Converters.IConverter</name>
                <newname>bc</newname>
                <methodlist>
                    <method>
                        <signature>object(object)</signature>
                        <name>Convert</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TIn</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TOut</name>
                    <newname>b</newname>
                </genericparameter>
                <name>ExcelReportGenerator.Converters.IGenericConverter`2</name>
                <newname>bd</newname>
                <methodlist>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>Convert</name>
                        <newname>as</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Enumerators.DataReaderEnumerator</name>
                <newname>ba</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Data.IDataReader)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Data.DataRow()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RowCount</name>
                        <newname>ar</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Enumerators.IGenericCustomEnumerator`1&lt;System.Data.DataRow&gt;</signature>
                        <name>_dataTableEnumerator</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Enumerators.DataSetEnumerator</name>
                <newname>bb</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Data.DataSet, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Data.DataRow()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RowCount</name>
                        <newname>ar</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Enumerators.IGenericCustomEnumerator`1&lt;System.Data.DataRow&gt;</signature>
                        <name>_dataTableEnumerator</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Enumerators.DataTableEnumerator</name>
                <newname>a5</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Data.DataTable)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Data.DataRow()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RowCount</name>
                        <newname>ar</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Data.DataTable</signature>
                        <name>_dataTable</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Data.DataRow&gt;</signature>
                        <name>_dataTableEnumerator</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Enumerators.EnumerableEnumerator</name>
                <newname>a7</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.IEnumerable)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RowCount</name>
                        <newname>ar</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.IEnumerable</signature>
                        <name>_enumerable</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.IEnumerator</signature>
                        <name>_enumerator</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>_rowCount</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Enumerators.EnumeratorFactory</name>
                <newname>a6</newname>
                <methodlist>
                    <method>
                        <signature>ExcelReportGenerator.Enumerators.ICustomEnumerator(object)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Enumerators.ICustomEnumerator</name>
                <newname>a8</newname>
                <methodlist>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RowCount</name>
                        <newname>ar</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>ExcelReportGenerator.Enumerators.IGenericCustomEnumerator`1</name>
                <newname>a9</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Enums.AggregateFunction</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction</signature>
                        <name>Avg</name>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction</signature>
                        <name>Count</name>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction</signature>
                        <name>Custom</name>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction</signature>
                        <name>Max</name>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction</signature>
                        <name>Min</name>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction</signature>
                        <name>NoAggregation</name>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction</signature>
                        <name>Sum</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Enums.Direction</name>
                <newname>a2</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Enums.Direction</signature>
                        <name>Bottom</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.Direction</signature>
                        <name>Left</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.Direction</signature>
                        <name>Right</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.Direction</signature>
                        <name>Top</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Enums.PanelType</name>
                <newname>a3</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Enums.PanelType</signature>
                        <name>Horizontal</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.PanelType</signature>
                        <name>Vertical</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Enums.ShiftType</name>
                <newname>a4</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Enums.ShiftType</signature>
                        <name>Cells</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.ShiftType</signature>
                        <name>NoShift</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.ShiftType</signature>
                        <name>Row</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Excel.AddressShift</name>
                <newname>az</newname>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ColCount</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RowCount</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ColCount</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_RowCount</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ColCount&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;RowCount&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Excel.CellCoords</name>
                <newname>a0</newname>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ColNum</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RowNum</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ColNum</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_RowNum</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ColNum&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;RowNum&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Excel.ExcelHelper</name>
                <newname>ay</newname>
                <methodlist>
                    <method>
                        <signature>ClosedXML.Excel.IXLWorksheet(ClosedXML.Excel.XLWorkbook)</signature>
                        <name>AddTempWorksheet</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange, ExcelReportGenerator.Enums.Direction, ExcelReportGenerator.Enums.ShiftType)</signature>
                        <name>AllocateSpaceForNextRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(ClosedXML.Excel.IXLRange)</signature>
                        <name>CloneRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLNamedRange(ClosedXML.Excel.IXLNamedRange, ClosedXML.Excel.IXLCell, string)</signature>
                        <name>CopyNamedRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(ClosedXML.Excel.IXLRange, ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyRange</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange, ExcelReportGenerator.Enums.ShiftType, ClosedXML.Excel.XLShiftDeletedCells)</signature>
                        <name>DeleteRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Excel.AddressShift(ClosedXML.Excel.IXLAddress, ClosedXML.Excel.IXLAddress)</signature>
                        <name>GetAddressShift</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Excel.CellCoords(ClosedXML.Excel.IXLRange, ClosedXML.Excel.IXLCell, bool)</signature>
                        <name>GetCellCoordsRelativeRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLCell(ClosedXML.Excel.IXLCell[])</signature>
                        <name>GetMaxCell</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(System.Collections.Generic.IEnumerable`1&lt;ClosedXML.Excel.IXLRange&gt;, ClosedXML.Excel.IXLRange)</signature>
                        <name>GetNearestParentRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Excel.RangeCoords(ClosedXML.Excel.IXLRange, ClosedXML.Excel.IXLRange, bool)</signature>
                        <name>GetRangeCoordsRelativeParent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell, ClosedXML.Excel.IXLRange)</signature>
                        <name>IsCellInsideRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLRange, ClosedXML.Excel.IXLRange)</signature>
                        <name>IsRangeInsideAnotherRange</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLRange)</signature>
                        <name>IsRangeInvalid</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(ClosedXML.Excel.IXLRange, ClosedXML.Excel.IXLRange)</signature>
                        <name>MergeRanges</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLNamedRange(ClosedXML.Excel.IXLNamedRange, ClosedXML.Excel.IXLCell)</signature>
                        <name>MoveNamedRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(ClosedXML.Excel.IXLRange, ClosedXML.Excel.IXLCell)</signature>
                        <name>MoveRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLCell(ClosedXML.Excel.IXLCell, ExcelReportGenerator.Excel.AddressShift)</signature>
                        <name>ShiftCell</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Excel.ExcelHelper/&lt;&gt;c</name>
                <newname>ay/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;GetMaxCell&gt;b__15_2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;GetMaxCell&gt;b__15_3</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32(ClosedXML.Excel.IXLRange)</signature>
                        <name>&lt;GetNearestParentRange&gt;b__2_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Excel.ExcelHelper/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLCell,int32&gt;</signature>
                        <name>&lt;&gt;9__15_2</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLCell,int32&gt;</signature>
                        <name>&lt;&gt;9__15_3</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLRange,int32&gt;</signature>
                        <name>&lt;&gt;9__2_0</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Excel.ExcelHelper/&lt;&gt;c__DisplayClass15_0</name>
                <newname>ay/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;GetMaxCell&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;GetMaxCell&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ClosedXML.Excel.IXLCell[]</signature>
                        <name>cells</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Excel.ExcelHelper/&lt;&gt;c__DisplayClass2_0</name>
                <newname>ay/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLRange)</signature>
                        <name>&lt;GetNearestParentRange&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>cellsCountInMinRange</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Excel.RangeCoords</name>
                <newname>a1</newname>
                <methodlist>
                    <method>
                        <signature>void(ExcelReportGenerator.Excel.CellCoords, ExcelReportGenerator.Excel.CellCoords)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Excel.CellCoords()</signature>
                        <name>get_FirstCell</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Excel.CellCoords()</signature>
                        <name>get_LastCell</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Excel.CellCoords)</signature>
                        <name>set_FirstCell</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Excel.CellCoords)</signature>
                        <name>set_LastCell</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Excel.CellCoords</signature>
                        <name>&lt;FirstCell&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Excel.CellCoords</signature>
                        <name>&lt;LastCell&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Exceptions.ColumnNotFoundException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Exceptions.InvalidTemplateException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Exceptions.InvalidVariableException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Exceptions.MemberNotFoundException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Exceptions.MethodNotFoundException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Exceptions.TypeNotFoundException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.DataReaderExtensions</name>
                <newname>as</newname>
                <methodlist>
                    <method>
                        <signature>object(System.Data.IDataReader, int32)</signature>
                        <name>SafeGetValue</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.ParameterInfoExtensions</name>
                <newname>au</newname>
                <methodlist>
                    <method>
                        <signature>bool(System.Reflection.ParameterInfo)</signature>
                        <name>IsParams</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.StringExtensions</name>
                <newname>av</newname>
                <methodlist>
                    <method>
                        <signature>string(string, string, string)</signature>
                        <name>ReplaceFirst</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.TemplateProcessorExtensions</name>
                <newname>ax</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, ExcelReportGenerator.Enums.AggregateFunction, string)</signature>
                        <name>BuildAggregationFuncTemplate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>BuildDataItemTemplate</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>BuildMethodCallTemplate</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>BuildPropertyTemplate</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>BuildSystemFunctionTemplate</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string, string)</signature>
                        <name>BuildTemplate</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>BuildVariableTemplate</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>GetAggregationFuncRegexPattern</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>GetDataItemRegexPattern</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>GetFullRegexPattern</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>GetMethodCallRegexPattern</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>GetPropertyRegexPattern</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>GetRegexPattern</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>GetSystemFunctionRegexPattern</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>GetTemplatesWithAggregationRegexPattern</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>GetVariableRegexPattern</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>IsHorizontalPageBreak</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string, string)</signature>
                        <name>IsPageBreak</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>IsVerticalPageBreak</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>TrimDataItemLabel</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string, string)</signature>
                        <name>TrimMemberLabel</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>TrimMethodCallLabel</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>TrimPropertyLabel</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>TrimSystemFunctionLabel</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string)</signature>
                        <name>TrimVariableLabel</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string, bool)</signature>
                        <name>UnwrapTemplate</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, string, bool)</signature>
                        <name>WrapTemplate</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string[]</signature>
                        <name>AllAggregationFuncs</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.TemplateProcessorExtensions/&lt;&gt;c</name>
                <newname>ax/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;.cctor&gt;b__28_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Extensions.TemplateProcessorExtensions/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.TypeExtensions</name>
                <newname>aw</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsExtendedPrimitive</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsNumeric</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type[]</signature>
                        <name>_extendedPrimitiveTypes</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Type[]</signature>
                        <name>_numericTypes</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.XLRangeBaseExtensions</name>
                <newname>at</newname>
                <methodlist>
                    <method>
                        <signature>ClosedXML.Excel.IXLCells(ClosedXML.Excel.IXLRangeBase)</signature>
                        <name>CellsUsedWithoutFormulas</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLCells(ClosedXML.Excel.IXLRangeBase, System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;)</signature>
                        <name>CellsUsedWithoutFormulas</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLCells(ClosedXML.Excel.IXLRangeBase, bool)</signature>
                        <name>CellsUsedWithoutFormulas</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLCells(ClosedXML.Excel.IXLRangeBase, bool, System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;)</signature>
                        <name>CellsUsedWithoutFormulas</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLCells(ClosedXML.Excel.IXLRangeBase)</signature>
                        <name>CellsWithoutFormulas</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLCells(ClosedXML.Excel.IXLRangeBase, System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;)</signature>
                        <name>CellsWithoutFormulas</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.XLRangeBaseExtensions/&lt;&gt;c</name>
                <newname>at/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;CellsUsedWithoutFormulas&gt;b__0_0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;CellsUsedWithoutFormulas&gt;b__2_0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;CellsWithoutFormulas&gt;b__4_0</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Extensions.XLRangeBaseExtensions/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;</signature>
                        <name>&lt;&gt;9__0_0</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;</signature>
                        <name>&lt;&gt;9__2_0</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;</signature>
                        <name>&lt;&gt;9__4_0</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.XLRangeBaseExtensions/&lt;&gt;c__DisplayClass1_0</name>
                <newname>at/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;CellsUsedWithoutFormulas&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;</signature>
                        <name>predicate</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.XLRangeBaseExtensions/&lt;&gt;c__DisplayClass3_0</name>
                <newname>at/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;CellsUsedWithoutFormulas&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;</signature>
                        <name>predicate</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Extensions.XLRangeBaseExtensions/&lt;&gt;c__DisplayClass5_0</name>
                <newname>at/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;CellsWithoutFormulas&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;</signature>
                        <name>predicate</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Helpers.ArgumentHelper</name>
                <newname>am</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>EmptyStringParamMessage</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NullParamMessage</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Helpers.EnumHelper</name>
                <newname>an</newname>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, bool)</signature>
                        <name>Parse</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Helpers.IReflectionHelper</name>
                <newname>ao</newname>
                <methodlist>
                    <method>
                        <signature>System.Reflection.FieldInfo(System.Type, string, System.Reflection.BindingFlags)</signature>
                        <name>GetField</name>
                        <newname>ao</newname>
                    </method>
                    <method>
                        <signature>object(System.Reflection.MemberInfo)</signature>
                        <name>GetNullValueAttributeValue</name>
                        <newname>aq</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.PropertyInfo(System.Type, string, System.Reflection.BindingFlags)</signature>
                        <name>GetProperty</name>
                        <newname>am</newname>
                    </method>
                    <method>
                        <signature>object(string, object, System.Reflection.BindingFlags)</signature>
                        <name>GetValueOfPropertiesChain</name>
                        <newname>al</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.FieldInfo(System.Type, string, System.Reflection.BindingFlags)</signature>
                        <name>TryGetField</name>
                        <newname>ap</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.PropertyInfo(System.Type, string, System.Reflection.BindingFlags)</signature>
                        <name>TryGetProperty</name>
                        <newname>an</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Helpers.ReflectionHelper</name>
                <newname>ap</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.FieldInfo(System.Type, string, System.Reflection.BindingFlags)</signature>
                        <name>GetField</name>
                        <newname>ao</newname>
                    </method>
                    <method>
                        <signature>object(System.Reflection.MemberInfo)</signature>
                        <name>GetNullValueAttributeValue</name>
                        <newname>aq</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.PropertyInfo(System.Type, string, System.Reflection.BindingFlags)</signature>
                        <name>GetProperty</name>
                        <newname>am</newname>
                    </method>
                    <method>
                        <signature>object(string, object, System.Reflection.BindingFlags)</signature>
                        <name>GetValueOfPropertiesChain</name>
                        <newname>al</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.FieldInfo(System.Type, string, System.Reflection.BindingFlags)</signature>
                        <name>TryGetField</name>
                        <newname>ap</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.PropertyInfo(System.Type, string, System.Reflection.BindingFlags)</signature>
                        <name>TryGetProperty</name>
                        <newname>an</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Helpers.RegexHelper</name>
                <newname>aq</newname>
                <methodlist>
                    <method>
                        <signature>string(string)</signature>
                        <name>SafeEscape</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Helpers.TypeHelper</name>
                <newname>ar</newname>
                <methodlist>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsDictionaryStringObject</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsEnumerableOfKeyValuePair</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsGenericEnumerable</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsKeyValuePair</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>TryGetGenericCollectionInterface</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>TryGetGenericDictionaryInterface</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Type)</signature>
                        <name>TryGetGenericEnumerableInterface</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Helpers.TypeHelper/&lt;&gt;c</name>
                <newname>ar/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;IsDictionaryStringObject&gt;b__2_0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;TryGetGenericCollectionInterface&gt;b__6_0</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;TryGetGenericDictionaryInterface&gt;b__4_0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;TryGetGenericEnumerableInterface&gt;b__3_0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Helpers.TypeHelper/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Type,bool&gt;</signature>
                        <name>&lt;&gt;9__2_0</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Type,bool&gt;</signature>
                        <name>&lt;&gt;9__3_0</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Type,bool&gt;</signature>
                        <name>&lt;&gt;9__4_0</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Type,bool&gt;</signature>
                        <name>&lt;&gt;9__6_0</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Licensing</name>
                <newname>e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckLicence</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.Type[])</signature>
                        <name>GetKey</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Reverse</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Licensing/&lt;&gt;c</name>
                <newname>e/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;CheckLicence&gt;b__0_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Licensing/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Type,bool&gt;</signature>
                        <name>&lt;&gt;9__0_0</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.DefaultReportGenerator</name>
                <methodlist>
                    <method>
                        <signature>void(object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLNamedRange)</signature>
                        <name>&lt;GetPanelsNamedRanges&gt;b__51_0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel, ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>CheckParentChildPanelsCorrectness</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,System.ValueTuple`2&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel,string&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;ClosedXML.Excel.IXLNamedRange&gt;)</signature>
                        <name>GetPanelsFlatView</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ClosedXML.Excel.IXLNamedRange&gt;(ClosedXML.Excel.IXLNamedRanges)</signature>
                        <name>GetPanelsNamedRanges</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(ClosedXML.Excel.IXLWorksheet, System.Collections.Generic.IList`1&lt;ClosedXML.Excel.IXLNamedRange&gt;)</signature>
                        <name>GetRootRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLCell(ClosedXML.Excel.IXLCell, System.Collections.Generic.IList`1&lt;ClosedXML.Excel.IXLNamedRange&gt;)</signature>
                        <name>GetRootRangeLastCell</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitDataItemValueProvider</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitTemplateProcessor</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,System.ValueTuple`2&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel,string&gt;&gt;, ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>MakePanelsHierarchy</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs)</signature>
                        <name>OnAfterWorksheetRender</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.EventArgs.ReportRenderEventArgs)</signature>
                        <name>OnBeforeReportRender</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs)</signature>
                        <name>OnBeforeWorksheetRender</name>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.XLWorkbook(ClosedXML.Excel.XLWorkbook, ClosedXML.Excel.IXLWorksheet[])</signature>
                        <name>Render</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs&gt;)</signature>
                        <name>add_AfterWorksheetRender</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.ReportRenderEventArgs&gt;)</signature>
                        <name>add_BeforeReportRender</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs&gt;)</signature>
                        <name>add_BeforeWorksheetRender</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IGenericDataItemValueProvider`1&lt;ExcelReportGenerator.Rendering.HierarchicalDataItem&gt;()</signature>
                        <name>get_DataItemValueProvider</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.IInstanceProvider()</signature>
                        <name>get_InstanceProvider</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.IMethodCallValueProvider()</signature>
                        <name>get_MethodCallValueProvider</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.PanelParsingSettings()</signature>
                        <name>get_PanelParsingSettings</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Parsers.IPanelPropertiesParser()</signature>
                        <name>get_PanelPropertiesParser</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PanelsRegexPattern</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.IPropertyValueProvider()</signature>
                        <name>get_PropertyValueProvider</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_SystemFunctionsType</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.VariableProviders.SystemVariableProvider()</signature>
                        <name>get_SystemVariableProvider</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor()</signature>
                        <name>get_TemplateProcessor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.ITypeProvider()</signature>
                        <name>get_TypeProvider</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs&gt;)</signature>
                        <name>remove_AfterWorksheetRender</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.ReportRenderEventArgs&gt;)</signature>
                        <name>remove_BeforeReportRender</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs&gt;)</signature>
                        <name>remove_BeforeWorksheetRender</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_SystemFunctionsType</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Providers.VariableProviders.SystemVariableProvider)</signature>
                        <name>set_SystemVariableProvider</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;SystemFunctionsType&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.VariableProviders.SystemVariableProvider</signature>
                        <name>&lt;SystemVariableProvider&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs&gt;</signature>
                        <name>AfterWorksheetRender</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.ReportRenderEventArgs&gt;</signature>
                        <name>BeforeReportRender</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs&gt;</signature>
                        <name>BeforeWorksheetRender</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IGenericDataItemValueProvider`1&lt;ExcelReportGenerator.Rendering.HierarchicalDataItem&gt;</signature>
                        <name>_dataItemValueProvider</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.IInstanceProvider</signature>
                        <name>_instanceProvider</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.IMethodCallValueProvider</signature>
                        <name>_methodCallValueProvider</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.PanelParsingSettings</signature>
                        <name>_panelParsingSettings</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Parsers.IPanelPropertiesParser</signature>
                        <name>_panelPropertiesParser</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_panelsRegexPattern</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.IPropertyValueProvider</signature>
                        <name>_propertyValueProvider</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_report</name>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor</signature>
                        <name>_templateProcessor</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ITypeProvider</signature>
                        <name>_typeProvider</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IGenericDataItemValueProvider`1&lt;ExcelReportGenerator.Rendering.HierarchicalDataItem&gt;()</signature>
                        <name>DataItemValueProvider</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.IInstanceProvider()</signature>
                        <name>InstanceProvider</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.IMethodCallValueProvider()</signature>
                        <name>MethodCallValueProvider</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.PanelParsingSettings()</signature>
                        <name>PanelParsingSettings</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Parsers.IPanelPropertiesParser()</signature>
                        <name>PanelPropertiesParser</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PanelsRegexPattern</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.IPropertyValueProvider()</signature>
                        <name>PropertyValueProvider</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>SystemFunctionsType</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.VariableProviders.SystemVariableProvider()</signature>
                        <name>SystemVariableProvider</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor()</signature>
                        <name>TemplateProcessor</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.ITypeProvider()</signature>
                        <name>TypeProvider</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs&gt;</signature>
                        <name>AfterWorksheetRender</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.ReportRenderEventArgs&gt;</signature>
                        <name>BeforeReportRender</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs&gt;</signature>
                        <name>BeforeWorksheetRender</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.DefaultReportGenerator/&lt;&gt;c</name>
                <newname>ExcelReportGenerator.Rendering.DefaultReportGenerator/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;ClosedXML.Excel.IXLCell&gt;(ClosedXML.Excel.IXLNamedRange)</signature>
                        <name>&lt;GetRootRangeLastCell&gt;b__50_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.DefaultReportGenerator/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLNamedRange,System.Collections.Generic.IEnumerable`1&lt;ClosedXML.Excel.IXLCell&gt;&gt;</signature>
                        <name>&lt;&gt;9__50_0</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.DefaultReportGenerator/&lt;&gt;c__DisplayClass37_0</name>
                <newname>/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLNamedRange)</signature>
                        <name>&lt;Render&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ClosedXML.Excel.IXLNamedRange</signature>
                        <name>workbookPanel</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.DefaultReportGenerator/&lt;&gt;c__DisplayClass46_0</name>
                <newname>ExcelReportGenerator.Rendering.DefaultReportGenerator/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLNamedRange)</signature>
                        <name>&lt;Render&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ClosedXML.Excel.IXLNamedRange</signature>
                        <name>workbookPanel</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.EventArgs.DataItemPanelBeforeRenderEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem()</signature>
                        <name>get_DataItem</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>set_DataItem</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem</signature>
                        <name>&lt;DataItem&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem()</signature>
                        <name>DataItem</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.EventArgs.DataItemPanelEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem()</signature>
                        <name>get_DataItem</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>set_DataItem</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem</signature>
                        <name>&lt;DataItem&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem()</signature>
                        <name>DataItem</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.EventArgs.DataSourceDynamicPanelBeforeRenderEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;()</signature>
                        <name>get_Columns</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;)</signature>
                        <name>set_Columns</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;</signature>
                        <name>&lt;Columns&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;()</signature>
                        <name>Columns</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.EventArgs.DataSourceDynamicPanelEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;()</signature>
                        <name>get_Columns</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;)</signature>
                        <name>set_Columns</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;</signature>
                        <name>&lt;Columns&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;()</signature>
                        <name>Columns</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.EventArgs.DataSourcePanelBeforeRenderEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Data</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Data&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Data</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.EventArgs.DataSourcePanelEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Data</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Data&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Data</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.EventArgs.PanelBeforeRenderEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCanceled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsCanceled</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsCanceled&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCanceled</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.EventArgs.PanelEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange()</signature>
                        <name>get_Range</name>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange)</signature>
                        <name>set_Range</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ClosedXML.Excel.IXLRange</signature>
                        <name>&lt;Range&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ClosedXML.Excel.IXLRange()</signature>
                        <name>Range</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.EventArgs.ReportRenderEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.XLWorkbook()</signature>
                        <name>get_Workbook</name>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.XLWorkbook)</signature>
                        <name>set_Workbook</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ClosedXML.Excel.XLWorkbook</signature>
                        <name>&lt;Workbook&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ClosedXML.Excel.XLWorkbook()</signature>
                        <name>Workbook</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.EventArgs.WorksheetRenderEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLWorksheet()</signature>
                        <name>get_Worksheet</name>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLWorksheet)</signature>
                        <name>set_Worksheet</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ClosedXML.Excel.IXLWorksheet</signature>
                        <name>&lt;Worksheet&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ClosedXML.Excel.IXLWorksheet()</signature>
                        <name>Worksheet</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.ExcelDynamicColumn</name>
                <methodlist>
                    <method>
                        <signature>void(string, System.Type, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AdjustToContent</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction()</signature>
                        <name>get_AggregateFunction</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Caption</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_DataType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayFormat</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Order</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_Width</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AdjustToContent</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Enums.AggregateFunction)</signature>
                        <name>set_AggregateFunction</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Caption</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_DataType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DisplayFormat</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Order</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_Width</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;AdjustToContent&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction</signature>
                        <name>&lt;AggregateFunction&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;DataType&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;DisplayFormat&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Order&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>&lt;Width&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_caption</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AdjustToContent</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction()</signature>
                        <name>AggregateFunction</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Caption</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>DataType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DisplayFormat</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Order</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>Width</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.HierarchicalDataItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>set_Parent</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Value</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem</signature>
                        <name>&lt;Parent&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem()</signature>
                        <name>Parent</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.PanelParsingSettings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DataSourcePanelPrefix</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DynamicDataSourcePanelPrefix</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PanelPrefixSeparator</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_PanelPropertiesSeparators</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PanelPropertyNameValueSeparator</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SimplePanelPrefix</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TotalsPanelPrefix</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DataSourcePanelPrefix</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DynamicDataSourcePanelPrefix</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PanelPrefixSeparator</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>set_PanelPropertiesSeparators</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PanelPropertyNameValueSeparator</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SimplePanelPrefix</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TotalsPanelPrefix</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;DataSourcePanelPrefix&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;DynamicDataSourcePanelPrefix&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PanelPrefixSeparator&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>&lt;PanelPropertiesSeparators&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PanelPropertyNameValueSeparator&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;SimplePanelPrefix&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;TotalsPanelPrefix&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>DataSourcePanelPrefix</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DynamicDataSourcePanelPrefix</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PanelPrefixSeparator</name>
                    </property>
                    <property>
                        <signature>string[]()</signature>
                        <name>PanelPropertiesSeparators</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PanelPropertyNameValueSeparator</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SimplePanelPrefix</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TotalsPanelPrefix</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataItemPanel</name>
                <newname>ag</newname>
                <methodlist>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange, object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyPanel</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.EventArgs.PanelEventArgs()</signature>
                        <name>GetAfterPanelRenderEventArgs</name>
                        <newname>ac</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.EventArgs.PanelBeforeRenderEventArgs()</signature>
                        <name>GetBeforePanelRenderEventArgs</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem()</signature>
                        <name>GetDataContext</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem()</signature>
                        <name>get_DataItem</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>set_DataItem</name>
                        <newname>z</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem</signature>
                        <name>&lt;DataItem&gt;k__BackingField</name>
                        <newname>v</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel</name>
                <newname>ad</newname>
                <methodlist>
                    <method>
                        <signature>void(object, ClosedXML.Excel.IXLNamedRange, object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, ClosedXML.Excel.IXLNamedRange, object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, ClosedXML.Excel.IXLRange, System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;)</signature>
                        <name>CallAfterRenderMethod</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string, ClosedXML.Excel.IXLRange, System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;)</signature>
                        <name>CallBeforeRenderMethod</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyPanel</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Render</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;)</signature>
                        <name>RenderColumnNumbers</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(ClosedXML.Excel.IXLRange)</signature>
                        <name>RenderData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;)</signature>
                        <name>RenderDataTemplates</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;)</signature>
                        <name>RenderHeaders</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(ClosedXML.Excel.IXLRange)</signature>
                        <name>RenderTotals</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;)</signature>
                        <name>RenderTotalsTemplates</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange, System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;)</signature>
                        <name>SetCellsDisplayFormat</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange, System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;)</signature>
                        <name>SetColumnsWidth</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AfterDataRenderMethodName</name>
                        <newname>ay</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AfterDataTemplatesRenderMethodName</name>
                        <newname>aw</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AfterHeadersRenderMethodName</name>
                        <newname>as</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AfterNumbersRenderMethodName</name>
                        <newname>au</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AfterTotalsRenderMethodName</name>
                        <newname>a2</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AfterTotalsTemplatesRenderMethodName</name>
                        <newname>a0</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BeforeDataRenderMethodName</name>
                        <newname>ax</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BeforeDataTemplatesRenderMethodName</name>
                        <newname>av</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BeforeHeadersRenderMethodName</name>
                        <newname>ar</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BeforeNumbersRenderMethodName</name>
                        <newname>at</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BeforeTotalsRenderMethodName</name>
                        <newname>a1</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BeforeTotalsTemplatesRenderMethodName</name>
                        <newname>az</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AfterDataRenderMethodName</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AfterDataTemplatesRenderMethodName</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AfterHeadersRenderMethodName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AfterNumbersRenderMethodName</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AfterTotalsRenderMethodName</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AfterTotalsTemplatesRenderMethodName</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BeforeDataRenderMethodName</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BeforeDataTemplatesRenderMethodName</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BeforeHeadersRenderMethodName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BeforeNumbersRenderMethodName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BeforeTotalsRenderMethodName</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BeforeTotalsTemplatesRenderMethodName</name>
                        <newname>o</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AfterDataRenderMethodName&gt;k__BackingField</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AfterDataTemplatesRenderMethodName&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AfterHeadersRenderMethodName&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AfterNumbersRenderMethodName&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AfterTotalsRenderMethodName&gt;k__BackingField</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AfterTotalsTemplatesRenderMethodName&gt;k__BackingField</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;BeforeDataRenderMethodName&gt;k__BackingField</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;BeforeDataTemplatesRenderMethodName&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;BeforeHeadersRenderMethodName&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;BeforeNumbersRenderMethodName&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;BeforeTotalsRenderMethodName&gt;k__BackingField</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;BeforeTotalsTemplatesRenderMethodName&gt;k__BackingField</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProviderFactory</signature>
                        <name>_columnsFactory</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>AfterDataRenderMethodName</name>
                        <newname>q</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AfterDataTemplatesRenderMethodName</name>
                        <newname>n</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AfterHeadersRenderMethodName</name>
                        <newname>e</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AfterNumbersRenderMethodName</name>
                        <newname>i</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AfterTotalsRenderMethodName</name>
                        <newname>u</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>AfterTotalsTemplatesRenderMethodName</name>
                        <newname>s</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>BeforeDataRenderMethodName</name>
                        <newname>p</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>BeforeDataTemplatesRenderMethodName</name>
                        <newname>l</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>BeforeHeadersRenderMethodName</name>
                        <newname>c</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>BeforeNumbersRenderMethodName</name>
                        <newname>g</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>BeforeTotalsRenderMethodName</name>
                        <newname>t</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>BeforeTotalsTemplatesRenderMethodName</name>
                        <newname>r</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel/&lt;&gt;c</name>
                <newname>ad/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType2`1&lt;string&gt;(string)</signature>
                        <name>&lt;RenderTotalsTemplates&gt;b__56_1</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,&lt;&gt;f__AnonymousType2`1&lt;string&gt;&gt;</signature>
                        <name>&lt;&gt;9__56_1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel/&lt;&gt;c__DisplayClass44_0</name>
                <newname>/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;RenderHeaders&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>template</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel/&lt;&gt;c__DisplayClass45_0</name>
                <newname>/f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;RenderColumnNumbers&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType0`1&lt;int32&gt;(ExcelReportGenerator.Rendering.ExcelDynamicColumn, int32)</signature>
                        <name>&lt;RenderColumnNumbers&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>startNumber</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>template</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel/&lt;&gt;c__DisplayClass46_0</name>
                <newname>/g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;RenderDataTemplates&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType1`1&lt;string&gt;(ExcelReportGenerator.Rendering.ExcelDynamicColumn)</signature>
                        <name>&lt;RenderDataTemplates&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>template</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel/&lt;&gt;c__DisplayClass48_0</name>
                <newname>/h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;RenderTotalsTemplates&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>template</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel/&lt;&gt;c__DisplayClass52_0</name>
                <newname>ad/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;RenderHeaders&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>template</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel/&lt;&gt;c__DisplayClass53_0</name>
                <newname>ad/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;RenderColumnNumbers&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType0`1&lt;int32&gt;(ExcelReportGenerator.Rendering.ExcelDynamicColumn, int32)</signature>
                        <name>&lt;RenderColumnNumbers&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>startNumber</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>template</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel/&lt;&gt;c__DisplayClass54_0</name>
                <newname>ad/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;RenderDataTemplates&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>&lt;&gt;f__AnonymousType1`1&lt;string&gt;(ExcelReportGenerator.Rendering.ExcelDynamicColumn)</signature>
                        <name>&lt;RenderDataTemplates&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>template</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourceDynamicPanel/&lt;&gt;c__DisplayClass56_0</name>
                <newname>ad/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;RenderTotalsTemplates&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>template</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourcePanel</name>
                <newname>ah</newname>
                <methodlist>
                    <method>
                        <signature>void(object, ClosedXML.Excel.IXLNamedRange, object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, ClosedXML.Excel.IXLNamedRange, object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel, int32)</signature>
                        <name>AllocateSpaceForData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyPanel</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataItemPanel()</signature>
                        <name>CreateTemplatePanel</name>
                        <newname>ar</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>DeletePanel</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.EventArgs.PanelEventArgs()</signature>
                        <name>GetAfterPanelRenderEventArgs</name>
                        <newname>ac</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.EventArgs.PanelBeforeRenderEventArgs()</signature>
                        <name>GetBeforePanelRenderEventArgs</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange, int32[])</signature>
                        <name>GroupCellsHorizontal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange, int32[])</signature>
                        <name>GroupCellsVertical</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>GroupResult</name>
                        <newname>as</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>MoveTemplatePanel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Render</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AfterDataItemRenderMethodName</name>
                        <newname>a5</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BeforeDataItemRenderMethodName</name>
                        <newname>a4</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_GroupBy</name>
                        <newname>a3</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AfterDataItemRenderMethodName</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BeforeDataItemRenderMethodName</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_GroupBy</name>
                        <newname>ac</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AfterDataItemRenderMethodName&gt;k__BackingField</name>
                        <newname>aj</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;BeforeDataItemRenderMethodName&gt;k__BackingField</name>
                        <newname>ai</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;GroupBy&gt;k__BackingField</name>
                        <newname>ah</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_data</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_dataSourceTemplate</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_isDataReceivedDirectly</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_templatePanelColumnCount</name>
                        <newname>ag</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_templatePanelRowCount</name>
                        <newname>af</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>AfterDataItemRenderMethodName</name>
                        <newname>z</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>BeforeDataItemRenderMethodName</name>
                        <newname>y</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>GroupBy</name>
                        <newname>x</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourcePanel/&lt;&gt;c</name>
                <newname>ah/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>&lt;GroupResult&gt;b__20_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelDataSourcePanel/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,int32&gt;</signature>
                        <name>&lt;&gt;9__20_0</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelNamedPanel</name>
                <newname>ai</newname>
                <methodlist>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLNamedRange, object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelNamedPanel(ClosedXML.Excel.IXLCell, string, bool)</signature>
                        <name>Copy</name>
                        <newname>ag</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ClosedXML.Excel.IXLCell, bool)</signature>
                        <name>Copy</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel, ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyChild</name>
                        <newname>ai</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLNamedRange(ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyNamedRange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyPanel</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Delete</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelNamedPanel()</signature>
                        <name>GetNearestNamedParent</name>
                        <newname>a6</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLCell)</signature>
                        <name>MoveRange</name>
                        <newname>aj</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RecalculateRangeRelativeParentRecursive</name>
                        <newname>ak</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>RemoveAllNamesRecursive</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>RemoveName</name>
                        <newname>ah</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Render</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>ad</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange()</signature>
                        <name>get_Range</name>
                        <newname>ae</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_copiedPanelName</name>
                        <newname>ag</newname>
                    </field>
                    <field>
                        <signature>ClosedXML.Excel.IXLNamedRange</signature>
                        <name>_namedRange</name>
                        <newname>af</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelPanel</name>
                <newname>aj</newname>
                <methodlist>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange, object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CallAfterRenderMethod</name>
                        <newname>a9</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>CallBeforeRenderMethod</name>
                        <newname>a8</newname>
                    </method>
                    <method>
                        <signature>object(string, object[])</signature>
                        <name>CallReportMethod</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ClosedXML.Excel.IXLCell, bool)</signature>
                        <name>Copy</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel, ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyChild</name>
                        <newname>ai</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyPanel</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange(ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyRange</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Delete</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>FillCopyProperties</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.EventArgs.PanelEventArgs()</signature>
                        <name>GetAfterPanelRenderEventArgs</name>
                        <newname>ac</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.EventArgs.PanelBeforeRenderEventArgs()</signature>
                        <name>GetBeforePanelRenderEventArgs</name>
                        <newname>ab</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem()</signature>
                        <name>GetDataContext</name>
                        <newname>aa</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLCell)</signature>
                        <name>Move</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MoveChildren</name>
                        <newname>a7</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLCell)</signature>
                        <name>MoveRange</name>
                        <newname>aj</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RecalculateRangeRelativeParentRecursive</name>
                        <newname>ak</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Render</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel, ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>SetParent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AfterRenderMethodName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BeforeRenderMethodName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel&gt;()</signature>
                        <name>get_Children</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel()</signature>
                        <name>get_Parent</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange()</signature>
                        <name>get_Range</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RenderPriority</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange()</signature>
                        <name>get_ResultRange</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Enums.ShiftType()</signature>
                        <name>get_ShiftType</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Enums.PanelType()</signature>
                        <name>get_Type</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AfterRenderMethodName</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BeforeRenderMethodName</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel&gt;)</signature>
                        <name>set_Children</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>set_Parent</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange)</signature>
                        <name>set_Range</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_RenderPriority</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLRange)</signature>
                        <name>set_ResultRange</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Enums.ShiftType)</signature>
                        <name>set_ShiftType</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Enums.PanelType)</signature>
                        <name>set_Type</name>
                        <newname>n</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AfterRenderMethodName&gt;k__BackingField</name>
                        <newname>at</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;BeforeRenderMethodName&gt;k__BackingField</name>
                        <newname>as</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel&gt;</signature>
                        <name>&lt;Children&gt;k__BackingField</name>
                        <newname>ao</newname>
                    </field>
                    <field>
                        <signature>ClosedXML.Excel.IXLRange</signature>
                        <name>&lt;Range&gt;k__BackingField</name>
                        <newname>am</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;RenderPriority&gt;k__BackingField</name>
                        <newname>ar</newname>
                    </field>
                    <field>
                        <signature>ClosedXML.Excel.IXLRange</signature>
                        <name>&lt;ResultRange&gt;k__BackingField</name>
                        <newname>an</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.ShiftType</signature>
                        <name>&lt;ShiftType&gt;k__BackingField</name>
                        <newname>ap</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Enums.PanelType</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                        <newname>aq</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Excel.RangeCoords</signature>
                        <name>_coordsRelativeParent</name>
                        <newname>ai</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel</signature>
                        <name>_parent</name>
                        <newname>ah</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_report</name>
                        <newname>aj</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor</signature>
                        <name>_templateProcessor</name>
                        <newname>al</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>AfterRenderMethodName</name>
                        <newname>aq</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>BeforeRenderMethodName</name>
                        <newname>ap</newname>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>RenderPriority</name>
                        <newname>ao</newname>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Enums.ShiftType()</signature>
                        <name>ShiftType</name>
                        <newname>am</newname>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Enums.PanelType()</signature>
                        <name>Type</name>
                        <newname>an</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelPanel/&lt;&gt;c</name>
                <newname>aj/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;ClosedXML.Excel.IXLCell&gt;(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>&lt;Render&gt;b__41_0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>&lt;Render&gt;b__41_2</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelPanel/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel,System.Collections.Generic.IEnumerable`1&lt;ClosedXML.Excel.IXLCell&gt;&gt;</signature>
                        <name>&lt;&gt;9__41_0</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel,int32&gt;</signature>
                        <name>&lt;&gt;9__41_2</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelPanel/&lt;&gt;c__DisplayClass37_0</name>
                <newname>/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;Render&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;</signature>
                        <name>&lt;&gt;9__1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;ClosedXML.Excel.IXLCell&gt;</signature>
                        <name>childrenCells</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelPanel/&lt;&gt;c__DisplayClass41_0</name>
                <newname>aj/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(ClosedXML.Excel.IXLCell)</signature>
                        <name>&lt;Render&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;ClosedXML.Excel.IXLCell,bool&gt;</signature>
                        <name>&lt;&gt;9__1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;ClosedXML.Excel.IXLCell&gt;</signature>
                        <name>childrenCells</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelPanelFactory</name>
                <newname>ae</newname>
                <methodlist>
                    <method>
                        <signature>void(object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, ExcelReportGenerator.Rendering.PanelParsingSettings)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string, System.Type)</signature>
                        <name>ConvertProperty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ClosedXML.Excel.IXLNamedRange, System.Collections.Generic.IDictionary`2&lt;string,string&gt;)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel()</signature>
                        <name>CreateDataSourcePanel</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel()</signature>
                        <name>CreateDynamicPanel</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel()</signature>
                        <name>CreateSimplePanel</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel()</signature>
                        <name>CreateTotalsPanel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>FillPanelProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetDataSourceProperty</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ClosedXML.Excel.IXLNamedRange</signature>
                        <name>_namedRange</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.PanelParsingSettings</signature>
                        <name>_panelParsingSettings</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;</signature>
                        <name>_properties</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_report</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor</signature>
                        <name>_templateProcessor</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelPanelFactory/&lt;&gt;c</name>
                <newname>ae/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;FillPanelProperties&gt;b__12_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelPanelFactory/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.PropertyInfo,bool&gt;</signature>
                        <name>&lt;&gt;9__12_0</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelPanelFactory/&lt;&gt;c__DisplayClass12_0</name>
                <newname>ae/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;FillPanelProperties&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.KeyValuePair`2&lt;string,string&gt;</signature>
                        <name>prop</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel</name>
                <newname>af</newname>
                <methodlist>
                    <method>
                        <signature>void(object, ClosedXML.Excel.IXLNamedRange, object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, ClosedXML.Excel.IXLNamedRange, object, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ClosedXML.Excel.IXLCell)</signature>
                        <name>CopyPanel</name>
                        <newname>x</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.IEnumerator, System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/ParsedAggregationFunc&gt;, ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>DoAggregation</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;ClosedXML.Excel.IXLCell,System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/ParsedAggregationFunc&gt;&gt;()</signature>
                        <name>ParseTotalCells</name>
                        <newname>ar</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Render</name>
                        <newname>w</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/&lt;&gt;c</name>
                <newname>af/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>&lt;ParseTotalCells&gt;b__3_0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/ParsedAggregationFunc&gt;(System.Collections.Generic.KeyValuePair`2&lt;ClosedXML.Excel.IXLCell,System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/ParsedAggregationFunc&gt;&gt;)</signature>
                        <name>&lt;Render&gt;b__2_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.KeyValuePair`2&lt;ClosedXML.Excel.IXLCell,System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/ParsedAggregationFunc&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/ParsedAggregationFunc&gt;&gt;</signature>
                        <name>&lt;&gt;9__2_0</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,string&gt;</signature>
                        <name>&lt;&gt;9__3_0</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/&lt;&gt;o__2</name>
                <newname>af/b</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,System.Collections.Generic.IDictionary`2&lt;string,object&gt;&gt;&gt;</signature>
                        <name>&lt;&gt;p__0</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/&lt;&gt;o__4</name>
                <newname>af/c</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__0</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,System.DBNull,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__10</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,bool,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__11</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__12</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,System.IComparable,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__13</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,int32&gt;&gt;</signature>
                        <name>&lt;&gt;p__14</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__15</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,bool,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__16</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__17</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__18</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,float64&gt;&gt;</signature>
                        <name>&lt;&gt;p__19</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__2</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__3</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__4</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__5</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__6</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__7</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__8</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__9</name>
                        <newname>j</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/&lt;&gt;o__5</name>
                <newname>/d</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__0</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,System.DBNull,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__10</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,bool,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__11</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__12</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,System.IComparable,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__13</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,int32&gt;&gt;</signature>
                        <name>&lt;&gt;p__14</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__15</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,bool,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__16</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__17</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__18</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,float64&gt;&gt;</signature>
                        <name>&lt;&gt;p__19</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__2</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__3</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__4</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__5</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__6</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__7</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__8</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__9</name>
                        <newname>j</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.ExcelTotalsPanel/ParsedAggregationFunc</name>
                <newname>af/a</newname>
                <methodlist>
                    <method>
                        <signature>void(ExcelReportGenerator.Enums.AggregateFunction, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction()</signature>
                        <name>get_AggregateFunction</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ColumnName</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CustomFunc</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PostProcessFunction</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Result</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UniqueName</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_CustomFunc</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PostProcessFunction</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Result</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UniqueName</name>
                        <newname>i</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction</signature>
                        <name>&lt;AggregateFunction&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ColumnName&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;CustomFunc&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PostProcessFunction&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Result&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UniqueName&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ExcelReportGenerator.Enums.AggregateFunction()</signature>
                        <name>AggregateFunction</name>
                        <newname>a</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ColumnName</name>
                        <newname>b</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>CustomFunc</name>
                        <newname>c</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PostProcessFunction</name>
                        <newname>d</newname>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Result</name>
                        <newname>e</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>UniqueName</name>
                        <newname>f</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelNamedPanel</name>
                <newname>ak</newname>
                <methodlist>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelNamedPanel(ClosedXML.Excel.IXLCell, string, bool)</signature>
                        <name>Copy</name>
                        <newname>ag</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>RemoveName</name>
                        <newname>ah</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel</name>
                <newname>al</newname>
                <methodlist>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel(ClosedXML.Excel.IXLCell, bool)</signature>
                        <name>Copy</name>
                        <newname>af</newname>
                    </method>
                    <method>
                        <signature>void(ClosedXML.Excel.IXLCell)</signature>
                        <name>Move</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RecalculateRangeRelativeParentRecursive</name>
                        <newname>ak</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Render</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel&gt;()</signature>
                        <name>get_Children</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel()</signature>
                        <name>get_Parent</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange()</signature>
                        <name>get_Range</name>
                        <newname>ae</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RenderPriority</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>ClosedXML.Excel.IXLRange()</signature>
                        <name>get_ResultRange</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Enums.ShiftType()</signature>
                        <name>get_ShiftType</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Enums.PanelType()</signature>
                        <name>get_Type</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel&gt;)</signature>
                        <name>set_Children</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel)</signature>
                        <name>set_Parent</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_RenderPriority</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Enums.ShiftType)</signature>
                        <name>set_ShiftType</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Enums.PanelType)</signature>
                        <name>set_Type</name>
                        <newname>n</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel&gt;()</signature>
                        <name>Children</name>
                        <newname>e</newname>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Panels.ExcelPanels.IExcelPanel()</signature>
                        <name>Parent</name>
                        <newname>c</newname>
                    </property>
                    <property>
                        <signature>ClosedXML.Excel.IXLRange()</signature>
                        <name>Range</name>
                        <newname>g</newname>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>RenderPriority</name>
                        <newname>p</newname>
                    </property>
                    <property>
                        <signature>ClosedXML.Excel.IXLRange()</signature>
                        <name>ResultRange</name>
                        <newname>i</newname>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Enums.ShiftType()</signature>
                        <name>ShiftType</name>
                        <newname>l</newname>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Enums.PanelType()</signature>
                        <name>Type</name>
                        <newname>n</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.IDataItemPanel</name>
                <newname>aa</newname>
                <methodlist>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.HierarchicalDataItem()</signature>
                        <name>get_DataItem</name>
                        <newname>y</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>set_DataItem</name>
                        <newname>z</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.INamedPanel</name>
                <newname>ab</newname>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>ad</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Panels.IPanel</name>
                <newname>ac</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>Delete</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AfterRenderMethodName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BeforeRenderMethodName</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AfterRenderMethodName</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BeforeRenderMethodName</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Parsers.DefaultPanelPropertiesParser</name>
                <newname>y</newname>
                <methodlist>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.PanelParsingSettings)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;(string)</signature>
                        <name>Parse</name>
                        <newname>v</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.PanelParsingSettings</signature>
                        <name>_panelParsingSettings</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Parsers.IPanelPropertiesParser</name>
                <newname>z</newname>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;(string)</signature>
                        <name>Parse</name>
                        <newname>v</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.ColumnsProviderFactory</name>
                <newname>l</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProvider(object)</signature>
                        <name>Create</name>
                        <newname>s</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.DataReaderColumnsProvider</name>
                <newname>m</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(object)</signature>
                        <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProvider.GetColumnsList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(System.Data.IDataReader)</signature>
                        <name>GetColumnsList</name>
                        <newname>t</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.DataReaderColumnsProvider/&lt;&gt;c</name>
                <newname>m/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.ExcelDynamicColumn(System.Data.DataRow)</signature>
                        <name>&lt;GetColumnsList&gt;b__0_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.DataReaderColumnsProvider/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Data.DataRow,ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;</signature>
                        <name>&lt;&gt;9__0_0</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.DataSetColumnsProvider</name>
                <newname>n</newname>
                <methodlist>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IGenericColumnsProvider`1&lt;System.Data.DataTable&gt;, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(object)</signature>
                        <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProvider.GetColumnsList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(System.Data.DataSet)</signature>
                        <name>GetColumnsList</name>
                        <newname>t</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IGenericColumnsProvider`1&lt;System.Data.DataTable&gt;</signature>
                        <name>_dataTableColumnsProvider</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_tableName</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.DataTableColumnsProvider</name>
                <newname>o</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(object)</signature>
                        <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProvider.GetColumnsList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(System.Data.DataTable)</signature>
                        <name>GetColumnsList</name>
                        <newname>t</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.DataTableColumnsProvider/&lt;&gt;c</name>
                <newname>o/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.ExcelDynamicColumn(System.Data.DataColumn)</signature>
                        <name>&lt;GetColumnsList&gt;b__0_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.DataTableColumnsProvider/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Data.DataColumn,ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;</signature>
                        <name>&lt;&gt;9__0_0</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TValue</name>
                    <newname>a</newname>
                </genericparameter>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.DictionaryColumnsProvider`1</name>
                <newname>p</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(object)</signature>
                        <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProvider.GetColumnsList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IDictionary`2&lt;string,!0&gt;&gt;)</signature>
                        <name>GetColumnsList</name>
                        <newname>t</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.EnumerableColumnsProvider</name>
                <newname>q</newname>
                <methodlist>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IGenericColumnsProvider`1&lt;System.Type&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(object)</signature>
                        <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProvider.GetColumnsList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(System.Collections.IEnumerable)</signature>
                        <name>GetColumnsList</name>
                        <newname>t</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IGenericColumnsProvider`1&lt;System.Type&gt;</signature>
                        <name>_typeColumnsProvider</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.GenericEnumerableColumnsProvider</name>
                <newname>r</newname>
                <methodlist>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IGenericColumnsProvider`1&lt;System.Type&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(object)</signature>
                        <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProvider.GetColumnsList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(System.Collections.Generic.IEnumerable`1&lt;object&gt;)</signature>
                        <name>GetColumnsList</name>
                        <newname>t</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IGenericColumnsProvider`1&lt;System.Type&gt;</signature>
                        <name>_typeColumnsProvider</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProvider</name>
                <newname>s</newname>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(object)</signature>
                        <name>GetColumnsList</name>
                        <newname>u</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProviderFactory</name>
                <newname>t</newname>
                <methodlist>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProvider(object)</signature>
                        <name>Create</name>
                        <newname>s</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IGenericColumnsProvider`1</name>
                <newname>u</newname>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(!0)</signature>
                        <name>GetColumnsList</name>
                        <newname>t</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.KeyValuePairColumnsProvider</name>
                <newname>v</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(object)</signature>
                        <name>GetColumnsList</name>
                        <newname>u</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.ObjectColumnsProvider</name>
                <newname>w</newname>
                <methodlist>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IGenericColumnsProvider`1&lt;System.Type&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(object)</signature>
                        <name>GetColumnsList</name>
                        <newname>u</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IGenericColumnsProvider`1&lt;System.Type&gt;</signature>
                        <name>_typeColumnsProvider</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.TypeColumnsProvider</name>
                <newname>x</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(object)</signature>
                        <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.IColumnsProvider.GetColumnsList</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn&gt;(System.Type)</signature>
                        <name>GetColumnsList</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Attributes.ExcelColumnAttribute, ExcelReportGenerator.Rendering.ExcelDynamicColumn)</signature>
                        <name>SetAggregationFunction</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Attributes.ExcelColumnAttribute, ExcelReportGenerator.Rendering.ExcelDynamicColumn)</signature>
                        <name>SetDisplayFormat</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.TypeColumnsProvider/&lt;&gt;c</name>
                <newname>x/&lt;&gt;c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;GetColumnsList&gt;b__0_0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(ExcelReportGenerator.Rendering.ExcelDynamicColumn)</signature>
                        <name>&lt;GetColumnsList&gt;b__0_1</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ColumnsProviders.TypeColumnsProvider/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.MemberInfo,bool&gt;</signature>
                        <name>&lt;&gt;9__0_0</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ExcelReportGenerator.Rendering.ExcelDynamicColumn,int32&gt;</signature>
                        <name>&lt;&gt;9__0_1</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.DataItemValueProviderFactory</name>
                <newname>f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IDataItemValueProvider(object)</signature>
                        <name>Create</name>
                        <newname>r</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.DataReaderValueProvider</name>
                <newname>g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string, object)</signature>
                        <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IDataItemValueProvider.GetValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetColumnIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(string, System.Data.IDataReader)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>ThrowColumnNotFoundException</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_columnName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Data.IDataReader</signature>
                        <name>_dataReader</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.DataRowValueProvider</name>
                <newname>h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string, object)</signature>
                        <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IDataItemValueProvider.GetValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetColumnIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(string, System.Data.DataRow)</signature>
                        <name>GetValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_columnName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Data.DataRow</signature>
                        <name>_dataRow</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TValue</name>
                    <newname>a</newname>
                </genericparameter>
                <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.DictionaryValueProvider`1</name>
                <newname>i</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string, System.Collections.Generic.IDictionary`2&lt;string,!0&gt;)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>object(string, object)</signature>
                        <name>GetValue</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.HierarchicalDataItemValueProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IDataItemValueProviderFactory)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string, object)</signature>
                        <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IDataItemValueProvider.GetValue</name>
                    </method>
                    <method>
                        <signature>System.ValueTuple`2&lt;object,string&gt;(string, ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>GetDataItemGivenHierarchy</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(string, ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DataItemSelfTemplate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DataItemSelfTemplate</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;DataItemSelfTemplate&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IDataItemValueProviderFactory</signature>
                        <name>_factory</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>DataItemSelfTemplate</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IDataItemValueProvider</name>
                <methodlist>
                    <method>
                        <signature>object(string, object)</signature>
                        <name>GetValue</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IDataItemValueProviderFactory</name>
                <newname>j</newname>
                <methodlist>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IDataItemValueProvider(object)</signature>
                        <name>Create</name>
                        <newname>r</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IGenericDataItemValueProvider`1</name>
                <methodlist>
                    <method>
                        <signature>object(string, !0)</signature>
                        <name>GetValue</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.ObjectPropertyValueProvider</name>
                <newname>k</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Helpers.IReflectionHelper)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string, object)</signature>
                        <name>GetValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Helpers.IReflectionHelper</signature>
                        <name>_reflectionHelper</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DefaultInstanceProvider</name>
                <methodlist>
                    <method>
                        <signature>void(object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0()</signature>
                        <name>GetInstance</name>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>GetInstance</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_DefaultInstance</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>&lt;DefaultInstance&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;System.Type,object&gt;</signature>
                        <name>_instanceCache</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>DefaultInstance</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Providers.ITypeProvider, ExcelReportGenerator.Rendering.Providers.IInstanceProvider)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object, System.Reflection.MethodInfo, System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/InputParameter&gt;)</signature>
                        <name>CallMethod</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(string, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>CallMethod</name>
                    </method>
                    <method>
                        <signature>object(string, System.Type, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>CallMethod</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/InputParameter&gt;(string, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>GetInputParametersValues</name>
                    </method>
                    <method>
                        <signature>object(System.Type, bool)</signature>
                        <name>GetInstance</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Type, string, System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/InputParameter&gt;)</signature>
                        <name>GetMethod</name>
                    </method>
                    <method>
                        <signature>System.Type(string)</signature>
                        <name>GetTypeByCode</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string[](string)</signature>
                        <name>ParseInputParams</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.TemplateParts.MethodCallTemplateParts(string)</signature>
                        <name>ParseTemplate</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.IInstanceProvider()</signature>
                        <name>get_InstanceProvider</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MethodCallTemplate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.ITypeProvider()</signature>
                        <name>get_TypeProvider</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.IInstanceProvider</signature>
                        <name>&lt;InstanceProvider&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ITypeProvider</signature>
                        <name>&lt;TypeProvider&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Stack`1&lt;string&gt;</signature>
                        <name>TemplateStack</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.IInstanceProvider()</signature>
                        <name>InstanceProvider</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>MethodCallTemplate</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.ITypeProvider()</signature>
                        <name>TypeProvider</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;CallMethod&gt;b__12_0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;CallMethod&gt;b__12_1</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>&lt;GetMethod&gt;b__17_1</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/InputParameter)</signature>
                        <name>&lt;GetMethod&gt;b__17_3</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;GetMethod&gt;b__17_4</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;GetMethod&gt;b__17_5</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>&lt;ParseInputParams&gt;b__18_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.ParameterInfo,bool&gt;</signature>
                        <name>&lt;&gt;9__12_0</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.ParameterInfo,object&gt;</signature>
                        <name>&lt;&gt;9__12_1</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.MethodInfo,bool&gt;</signature>
                        <name>&lt;&gt;9__17_1</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/InputParameter,bool&gt;</signature>
                        <name>&lt;&gt;9__17_3</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.ParameterInfo,bool&gt;</signature>
                        <name>&lt;&gt;9__17_4</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.ParameterInfo,bool&gt;</signature>
                        <name>&lt;&gt;9__17_5</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,string&gt;</signature>
                        <name>&lt;&gt;9__18_0</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/&lt;&gt;c__DisplayClass17_0</name>
                <newname>ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>&lt;GetMethod&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>&lt;GetMethod&gt;b__2</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/InputParameter&gt;</signature>
                        <name>inputParameters</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>methodName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DefaultMethodCallValueProvider/InputParameter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_Type</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Value</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>Type</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DefaultPropertyValueProvider</name>
                <methodlist>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Providers.ITypeProvider, ExcelReportGenerator.Rendering.Providers.IInstanceProvider)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Providers.ITypeProvider, ExcelReportGenerator.Rendering.Providers.IInstanceProvider, ExcelReportGenerator.Helpers.IReflectionHelper)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MemberInfo(string, System.Type)</signature>
                        <name>GetFirstMember</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(System.Reflection.MemberInfo, System.Type)</signature>
                        <name>GetFirstMemberValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.TemplateParts.MemberTemplateParts(string)</signature>
                        <name>ParseTemplate</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.IInstanceProvider()</signature>
                        <name>get_InstanceProvider</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.ITypeProvider()</signature>
                        <name>get_TypeProvider</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.IInstanceProvider</signature>
                        <name>&lt;InstanceProvider&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.ITypeProvider</signature>
                        <name>&lt;TypeProvider&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>PropertiesSeparator</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Helpers.IReflectionHelper</signature>
                        <name>_reflectionHelper</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.IInstanceProvider()</signature>
                        <name>InstanceProvider</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.ITypeProvider()</signature>
                        <name>TypeProvider</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DefaultTypeProvider</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.ICollection`1&lt;System.Reflection.Assembly&gt;, System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Type(string)</signature>
                        <name>GetType</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.ICollection`1&lt;System.Reflection.Assembly&gt;()</signature>
                        <name>get_Assemblies</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_DefaultType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.ICollection`1&lt;System.Reflection.Assembly&gt;</signature>
                        <name>&lt;Assemblies&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;DefaultType&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>NamespaceSeparator</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,System.Type&gt;</signature>
                        <name>_typesCache</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.ICollection`1&lt;System.Reflection.Assembly&gt;()</signature>
                        <name>Assemblies</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>DefaultType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DefaultTypeProvider/&lt;&gt;c</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;(System.Reflection.Assembly)</signature>
                        <name>&lt;GetType&gt;b__9_0</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.DefaultTypeProvider/&lt;&gt;c</signature>
                        <name>&lt;&gt;9</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.Assembly,System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;&gt;</signature>
                        <name>&lt;&gt;9__9_0</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.DefaultTypeProvider/&lt;&gt;c__DisplayClass9_0</name>
                <newname>ExcelReportGenerator.Rendering.Providers.DefaultTypeProvider/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;GetType&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;GetType&gt;b__2</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>namespace</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.IInstanceProvider</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>!!0()</signature>
                        <name>GetInstance</name>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>GetInstance</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.IMethodCallValueProvider</name>
                <methodlist>
                    <method>
                        <signature>object(string, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>CallMethod</name>
                    </method>
                    <method>
                        <signature>object(string, System.Type, ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor, ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>CallMethod</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.IPropertyValueProvider</name>
                <methodlist>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetValue</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.ITypeProvider</name>
                <methodlist>
                    <method>
                        <signature>System.Type(string)</signature>
                        <name>GetType</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.Providers.VariableProviders.SystemVariableProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(ExcelReportGenerator.Helpers.IReflectionHelper)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetVariable</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_RenderDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SheetName</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SheetNumber</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_RenderDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SheetName</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_SheetNumber</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;RenderDate&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;SheetName&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;SheetNumber&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Helpers.IReflectionHelper</signature>
                        <name>_reflectionHelper</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>RenderDate</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SheetName</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>SheetNumber</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.SystemFunctions</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(object, string, object)</signature>
                        <name>Format</name>
                    </method>
                    <method>
                        <signature>object(object, int32)</signature>
                        <name>GetByIndex</name>
                    </method>
                    <method>
                        <signature>object(object, object)</signature>
                        <name>GetDictVal</name>
                    </method>
                    <method>
                        <signature>object(object, int32)</signature>
                        <name>TryGetByIndex</name>
                    </method>
                    <method>
                        <signature>object(object, object)</signature>
                        <name>TryGetDictVal</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.TemplateParts.MemberTemplateParts</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MemberName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TypeName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;MemberName&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;TypeName&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>MemberName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TypeName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.TemplateParts.MethodCallTemplateParts</name>
                <methodlist>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MethodParams</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;MethodParams&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>MethodParams</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.TemplateProcessors.DefaultTemplateProcessor</name>
                <methodlist>
                    <method>
                        <signature>void(ExcelReportGenerator.Rendering.Providers.IPropertyValueProvider, ExcelReportGenerator.Rendering.Providers.VariableProviders.SystemVariableProvider, ExcelReportGenerator.Rendering.Providers.IMethodCallValueProvider, ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IGenericDataItemValueProvider`1&lt;ExcelReportGenerator.Rendering.HierarchicalDataItem&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string, ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DataItemMemberLabel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DataItemSelfTemplate</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IGenericDataItemValueProvider`1&lt;ExcelReportGenerator.Rendering.HierarchicalDataItem&gt;()</signature>
                        <name>get_DataItemValueProvider</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HorizontalPageBreakLabel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LeftTemplateBorder</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MemberLabelSeparator</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MethodCallMemberLabel</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.IMethodCallValueProvider()</signature>
                        <name>get_MethodCallValueProvider</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PropertyMemberLabel</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.IPropertyValueProvider()</signature>
                        <name>get_PropertyValueProvider</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RightTemplateBorder</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SystemFunctionMemberLabel</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_SystemFunctionsType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SystemVariableMemberLabel</name>
                    </method>
                    <method>
                        <signature>ExcelReportGenerator.Rendering.Providers.VariableProviders.SystemVariableProvider()</signature>
                        <name>get_SystemVariableProvider</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_VerticalPageBreakLabel</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_SystemFunctionsType</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IGenericDataItemValueProvider`1&lt;ExcelReportGenerator.Rendering.HierarchicalDataItem&gt;</signature>
                        <name>&lt;DataItemValueProvider&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.IMethodCallValueProvider</signature>
                        <name>&lt;MethodCallValueProvider&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.IPropertyValueProvider</signature>
                        <name>&lt;PropertyValueProvider&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>&lt;SystemFunctionsType&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>ExcelReportGenerator.Rendering.Providers.VariableProviders.SystemVariableProvider</signature>
                        <name>&lt;SystemVariableProvider&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>DataItemMemberLabel</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DataItemSelfTemplate</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.DataItemValueProviders.IGenericDataItemValueProvider`1&lt;ExcelReportGenerator.Rendering.HierarchicalDataItem&gt;()</signature>
                        <name>DataItemValueProvider</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>HorizontalPageBreakLabel</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LeftTemplateBorder</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>MemberLabelSeparator</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>MethodCallMemberLabel</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.IMethodCallValueProvider()</signature>
                        <name>MethodCallValueProvider</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PropertyMemberLabel</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.IPropertyValueProvider()</signature>
                        <name>PropertyValueProvider</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>RightTemplateBorder</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SystemFunctionMemberLabel</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>SystemFunctionsType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SystemVariableMemberLabel</name>
                    </property>
                    <property>
                        <signature>ExcelReportGenerator.Rendering.Providers.VariableProviders.SystemVariableProvider()</signature>
                        <name>SystemVariableProvider</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>VerticalPageBreakLabel</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>ExcelReportGenerator.Rendering.TemplateProcessors.ITemplateProcessor</name>
                <methodlist>
                    <method>
                        <signature>object(string, ExcelReportGenerator.Rendering.HierarchicalDataItem)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DataItemMemberLabel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DataItemSelfTemplate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HorizontalPageBreakLabel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LeftTemplateBorder</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MemberLabelSeparator</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MethodCallMemberLabel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PropertyMemberLabel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RightTemplateBorder</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SystemFunctionMemberLabel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SystemVariableMemberLabel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_VerticalPageBreakLabel</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>DataItemMemberLabel</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DataItemSelfTemplate</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>HorizontalPageBreakLabel</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LeftTemplateBorder</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>MemberLabelSeparator</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>MethodCallMemberLabel</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PropertyMemberLabel</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>RightTemplateBorder</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SystemFunctionMemberLabel</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SystemVariableMemberLabel</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>VerticalPageBreakLabel</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>155</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>730</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>300</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties</description>
            <statistic>127</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events</description>
            <statistic>3</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>111</statistic>
            <statistic>71,61%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>393</statistic>
            <statistic>53,84%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>254</statistic>
            <statistic>84,67%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties Renamed</description>
            <statistic>36</statistic>
            <statistic>28,35%</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events Renamed</description>
            <statistic>0</statistic>
            <statistic>0,00%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>118</statistic>
            <statistic>16,16%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'b'</description>
            <statistic>50</statistic>
            <statistic>6,85%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'c'</description>
            <statistic>30</statistic>
            <statistic>4,11%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'd'</description>
            <statistic>23</statistic>
            <statistic>3,15%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'f'</description>
            <statistic>9</statistic>
            <statistic>1,23%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'ar'</description>
            <statistic>8</statistic>
            <statistic>1,10%</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'g'</description>
            <statistic>8</statistic>
            <statistic>1,10%</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>